##### 시간 체크 기능 추가####



##### 유사도 제목 날짜 본문  url image_url순으로 저장됨
def get_ai_message(question):
    big_start=time.time()
    start = time.time()
    top_doc, query_noun = best_docs(question)  # 가장 유사한 문서 가져오기
    best_docs_time = time.time() - start
    print(f"best_docs 생성 시간 : {best_docs_time}")
    ##### 다른 케이스는 별도로 처리
    if len(query_noun)==1 and any(keyword in query_noun for keyword in ['채용','공지사항','공지','세미나','행사','강연','특강']):
      if len(top_doc)>0:
        return generate_answer(top_doc, query_noun)

    top_docs = [list(doc) for doc in top_doc]
    if False ==(question_valid(question, top_docs[0][1], query_noun)):
      for i in range(len(top_docs)):
          top_docs[i][0]-=1.5

    print(f"\n\ntitles: {top_docs[0][1]} similarity: {top_docs[0][0]}, text:{(len(top_docs[0][3]))} doc_dates: {top_docs[0][2]} URL: {top_docs[0][4]}\n\n\n")
    ### top_docs에 이미지 URL이 들어있다면?
    if len(top_docs[0])==6 and top_docs[0][5]!="No content" and top_docs[0][3]=="No content" and top_docs[0][0]>1.8:
           # image_display 초기화 및 여러 이미지 처리
         #print("첫번째 조건 만족")
         image_display = ""
         for img_url in top_docs[0][5]:  # 여러 이미지 URL에 대해 반복
              image_display += f"<img src='{img_url}' alt='관련 이미지' style='max-width: 500px; max-height: 500px;' /><br>"
         doc_references = top_docs[0][4]
         # content 초기화
         content = []
        # top_docs의 내용 확인
         if top_docs[0][3] == "No content":
             content = []  # No content일 경우 비우기
         else:
             content = top_docs[0][3]  # content에 top_docs[0][3] 내용 저장
         if content:
            html_output = f"{image_display}<p>{content}</p><hr>\n"
         else:
            html_output = f"{image_display}<p>>\n"
        # HTML 출력 및 반환할 내용 생성
         display(HTML(image_display))
         return  f"항상 정확한 답변을 제공하지 못할 수 있습니다.아래의 URL들을 참고하여 정확하고 자세한 정보를 확인하세요.\n{doc_references}"

    else:
        start = time.time()
        qa_chain,relevant_docs = get_answer_from_chain(top_docs, question,query_noun)  # 답변 생성 체인 생성
        chain_time = time.time() - start
        print(f"체인 생성 시간 : {chain_time}")
        # 기존의 교수님 이미지 URL 저장 코드 중 중복된 URL 방지 부분
        image_display = ""
        seen_img_urls = set()  # 이미 출력된 이미지 URL을 추적하는 set

        # top_docs[0][5]가 "No content"가 아닐 경우에만 실행
        if top_docs[0][5] and top_docs[0][5] != "No content":
            # 이미지 URL이 리스트 형태인지 확인하고, 문자열로 잘라서 처리
            if isinstance(top_docs[0][5], list):
                for img_url in top_docs[0][5]:  # 여러 이미지 URL에 대해 반복
                    if img_url not in seen_img_urls:  # img_url이 이미 출력되지 않은 경우
                        image_display += f"<img src='{img_url}' alt='관련 이미지' style='max-width: 500px; max-height: 500px;' /><br>"
                        seen_img_urls.add(img_url)  # img_url을 set에 추가하여 중복을 방지
            else:
                # top_docs[0][5]가 단일 문자열일 경우, 이를 그대로 출력
                img_url = top_docs[0][5]
                if img_url not in seen_img_urls:
                    image_display += f"<img src='{img_url}' alt='관련 이미지' style='max-width: 500px; max-height: 500px;' /><br>"
                    seen_img_urls.add(img_url)

        doc_references = top_docs[0][4]
        start = time.time()
        existing_answer=""
        if qa_chain:
          existing_answer = qa_chain.invoke(question)# 초기 답변 생성 및 문자열로 할당
        answer_time = time.time() - start
        print(f"답변 생성 시간 : {answer_time}")
        answer_result=existing_answer
        big_end=time.time()
        print(f"총 시간 : {big_end-big_start}")
        if not qa_chain or not relevant_docs:
          if (top_docs[0][5]!="No content") and top_docs[0][0]>1.8:
            display(HTML(image_display))
            url=doc_references
            return f"\n\n해당 질문에 대한 내용은 이미지 파일로 확인해주세요.\n 자세한 사항은 공지사항을 살펴봐주세요.\n\n{url}"
          else:
            url="https://cse.knu.ac.kr/bbs/board.php?bo_table=sub5_1"
          return f"\n\n해당 질문은 공지사항에 없는 내용입니다.\n 자세한 사항은 공지사항을 살펴봐주세요.\n\n{url}"
        if (top_docs[0][0]<1.8):
          url="https://cse.knu.ac.kr/bbs/board.php?bo_table=sub5_1"
          return f"\n\n해당 질문은 공지사항에 없는 내용입니다.\n 자세한 사항은 공지사항을 살펴봐주세요.\n\n{url}"

        display(HTML(image_display))
        # 상위 3개의 참조한 문서의 URL 포함 형식으로 반환
        doc_references = "\n".join([
            f"\n참고 문서 URL: {doc.metadata['url']}"
            for doc in relevant_docs[:1] if doc.metadata.get('url') != 'No URL'
        ])

        # AI의 최종 답변과 참조 URL을 함께 반환
        return f"{answer_result}\n\n------------------------------------------------\n항상 정확한 답변을 제공하지 못할 수 있습니다.\n아래의 URL들을 참고하여 정확하고 자세한 정보를 확인하세요.\n{doc_references}"
